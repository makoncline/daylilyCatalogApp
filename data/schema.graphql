"""A connection to a list of `AhsDatum` values."""
type AhsDataConnection {
  """
  A list of edges which contains the `AhsDatum` and cursor to aid in pagination.
  """
  edges: [AhsDataEdge!]!

  """A list of `AhsDatum` objects."""
  nodes: [AhsDatum!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AhsDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `AhsDatum` edge in the connection."""
type AhsDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AhsDatum` at the end of the edge."""
  node: AhsDatum!
}

"""Methods to use when ordering `AhsDatum`."""
enum AhsDataOrderBy {
  AHS_ID_ASC
  AHS_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The results of scraping daylilies.org daylily database."""
type AhsDatum {
  """The id of the `AHS Data` from the daylilies.org database."""
  ahsId: Int!
  bloomHabit: String
  bloomSeason: String
  bloomSize: String
  branches: String
  budcount: String
  color: String
  createdAt: Datetime!
  flower: String
  foliage: String
  foliageType: String
  form: String
  fragrance: String
  hybridizer: String

  """The primary key for the `AHS Data`."""
  id: Int!
  image: String

  """Reads and enables pagination through a set of `Lily`."""
  liliesByAhsRef(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LilyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Lily`."""
    orderBy: [LiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LiliesConnection!
  name: String
  parentage: String
  ploidy: String
  scapeHeight: String
  sculpting: String
  seedlingNum: String
  updatedAt: Datetime!
  year: String
}

"""
A condition to be used against `AhsDatum` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AhsDatumCondition {
  """Checks for equality with the object’s `ahsId` field."""
  ahsId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  oldPassword: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the create `Lily` mutation."""
input CreateLilyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Lily` to be created by this mutation."""
  lily: LilyInput!
}

"""The output of our create `Lily` mutation."""
type CreateLilyPayload {
  """Reads a single `AhsDatum` that is related to this `Lily`."""
  ahsDatumByAhsRef: AhsDatum

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Lily` that was created by this mutation."""
  lily: Lily

  """An edge for our `Lily`. May be used by Relay 1."""
  lilyEdge(
    """The method to use when ordering `Lily`."""
    orderBy: [LiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LiliesEdge

  """Reads a single `List` that is related to this `Lily`."""
  list: List

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Lily`."""
  user: User
}

"""All input for the create `List` mutation."""
input CreateListInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `List` to be created by this mutation."""
  list: ListInput!
}

"""The output of our create `List` mutation."""
type CreateListPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `List` that was created by this mutation."""
  list: List

  """An edge for our `List`. May be used by Relay 1."""
  listEdge(
    """The method to use when ordering `List`."""
    orderBy: [ListsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ListsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `List`."""
  user: User
}

"""All input for the create `StripeCustomer` mutation."""
input CreateStripeCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StripeCustomer` to be created by this mutation."""
  stripeCustomer: StripeCustomerInput!
}

"""The output of our create `StripeCustomer` mutation."""
type CreateStripeCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `StripeCustomer` that was created by this mutation."""
  stripeCustomer: StripeCustomer

  """An edge for our `StripeCustomer`. May be used by Relay 1."""
  stripeCustomerEdge(
    """The method to use when ordering `StripeCustomer`."""
    orderBy: [StripeCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeCustomersEdge

  """Reads a single `User` that is related to this `StripeCustomer`."""
  user: User
}

"""All input for the create `StripeSubscription` mutation."""
input CreateStripeSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StripeSubscription` to be created by this mutation."""
  stripeSubscription: StripeSubscriptionInput!
}

"""The output of our create `StripeSubscription` mutation."""
type CreateStripeSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `StripeCustomer` that is related to this `StripeSubscription`.
  """
  customer: StripeCustomer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `StripeSubscription` that was created by this mutation."""
  stripeSubscription: StripeSubscription

  """An edge for our `StripeSubscription`. May be used by Relay 1."""
  stripeSubscriptionEdge(
    """The method to use when ordering `StripeSubscription`."""
    orderBy: [StripeSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeSubscriptionsEdge

  """Reads a single `User` that is related to this `StripeSubscription`."""
  user: User
}

"""All input for the `createUploadUrl` mutation."""
input CreateUploadUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  You must provide the content type (or MIME type) of the content you intend
  to upload. For further information about content types, see
  https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
  """
  contentType: String!
  keyPrefix: String
}

"""The output of our `createUploadUrl` mutation."""
type CreateUploadUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  key: String!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Upload content to this signed URL."""
  uploadUrl: String!
  url: String!
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the create `UserLilyPhoto` mutation."""
input CreateUserLilyPhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserLilyPhoto` to be created by this mutation."""
  userLilyPhoto: UserLilyPhotoInput!
}

"""The output of our create `UserLilyPhoto` mutation."""
type CreateUserLilyPhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Lily` that is related to this `UserLilyPhoto`."""
  lily: Lily

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLilyPhoto`."""
  user: User

  """The `UserLilyPhoto` that was created by this mutation."""
  userLilyPhoto: UserLilyPhoto

  """An edge for our `UserLilyPhoto`. May be used by Relay 1."""
  userLilyPhotoEdge(
    """The method to use when ordering `UserLilyPhoto`."""
    orderBy: [UserLilyPhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLilyPhotosEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteLily` mutation."""
input DeleteLilyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Lily` mutation."""
type DeleteLilyPayload {
  """Reads a single `AhsDatum` that is related to this `Lily`."""
  ahsDatumByAhsRef: AhsDatum

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedLilyNodeId: ID

  """The `Lily` that was deleted by this mutation."""
  lily: Lily

  """An edge for our `Lily`. May be used by Relay 1."""
  lilyEdge(
    """The method to use when ordering `Lily`."""
    orderBy: [LiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LiliesEdge

  """Reads a single `List` that is related to this `Lily`."""
  list: List

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Lily`."""
  user: User
}

"""All input for the `deleteList` mutation."""
input DeleteListInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key for the `List`."""
  id: Int!
}

"""The output of our delete `List` mutation."""
type DeleteListPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedListNodeId: ID

  """The `List` that was deleted by this mutation."""
  list: List

  """An edge for our `List`. May be used by Relay 1."""
  listEdge(
    """The method to use when ordering `List`."""
    orderBy: [ListsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ListsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `List`."""
  user: User
}

"""All input for the `deleteStripeCustomer` mutation."""
input DeleteStripeCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `StripeCustomer` mutation."""
type DeleteStripeCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedStripeCustomerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `StripeCustomer` that was deleted by this mutation."""
  stripeCustomer: StripeCustomer

  """An edge for our `StripeCustomer`. May be used by Relay 1."""
  stripeCustomerEdge(
    """The method to use when ordering `StripeCustomer`."""
    orderBy: [StripeCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeCustomersEdge

  """Reads a single `User` that is related to this `StripeCustomer`."""
  user: User
}

"""All input for the `deleteStripeSubscription` mutation."""
input DeleteStripeSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `StripeSubscription` mutation."""
type DeleteStripeSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `StripeCustomer` that is related to this `StripeSubscription`.
  """
  customer: StripeCustomer
  deletedStripeSubscriptionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `StripeSubscription` that was deleted by this mutation."""
  stripeSubscription: StripeSubscription

  """An edge for our `StripeSubscription`. May be used by Relay 1."""
  stripeSubscriptionEdge(
    """The method to use when ordering `StripeSubscription`."""
    orderBy: [StripeSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeSubscriptionsEdge

  """Reads a single `User` that is related to this `StripeSubscription`."""
  user: User
}

input DeleteUploadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  key: String!
}

type DeleteUploadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean!
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: Int!
}

"""All input for the `deleteUserLilyPhoto` mutation."""
input DeleteUserLilyPhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The s3 id the photo is saved at"""
  id: String!
}

"""The output of our delete `UserLilyPhoto` mutation."""
type DeleteUserLilyPhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserLilyPhotoNodeId: ID

  """Reads a single `Lily` that is related to this `UserLilyPhoto`."""
  lily: Lily

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLilyPhoto`."""
  user: User

  """The `UserLilyPhoto` that was deleted by this mutation."""
  userLilyPhoto: UserLilyPhoto

  """An edge for our `UserLilyPhoto`. May be used by Relay 1."""
  userLilyPhotoEdge(
    """The method to use when ordering `UserLilyPhoto`."""
    orderBy: [UserLilyPhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLilyPhotosEdge
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A connection to a list of `Lily` values."""
type LiliesConnection {
  """
  A list of edges which contains the `Lily` and cursor to aid in pagination.
  """
  edges: [LiliesEdge!]!

  """A list of `Lily` objects."""
  nodes: [Lily!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Lily` you could get from the connection."""
  totalCount: Int!
}

"""A `Lily` edge in the connection."""
type LiliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Lily` at the end of the edge."""
  node: Lily!
}

"""Methods to use when ordering `Lily`."""
enum LiliesOrderBy {
  AHS_REF_ASC
  AHS_REF_DESC
  ID_ASC
  ID_DESC
  LIST_ID_ASC
  LIST_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type Lily {
  """Reads a single `AhsDatum` that is related to this `Lily`."""
  ahsDatumByAhsRef: AhsDatum
  ahsId: String

  """The primary key for the `AHS Data` this `Lily` references."""
  ahsRef: Int
  createdAt: Datetime!
  id: Int!
  imgUrl: [String]

  """Reads a single `List` that is related to this `Lily`."""
  list: List

  """The primary key for the `List` this `Lily` belongs to."""
  listId: Int
  name: String!
  price: BigFloat
  privateNote: String
  publicNote: String
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Lily`."""
  user: User
  userId: Int!

  """Reads and enables pagination through a set of `UserLilyPhoto`."""
  userLilyPhotos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLilyPhotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserLilyPhoto`."""
    orderBy: [UserLilyPhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLilyPhotosConnection!
}

"""
A condition to be used against `Lily` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LilyCondition {
  """Checks for equality with the object’s `ahsRef` field."""
  ahsRef: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `listId` field."""
  listId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `Lily`"""
input LilyInput {
  ahsId: String

  """The primary key for the `AHS Data` this `Lily` references."""
  ahsRef: Int
  createdAt: Datetime
  id: Int
  imgUrl: [String]

  """The primary key for the `List` this `Lily` belongs to."""
  listId: Int
  name: String!
  price: BigFloat
  privateNote: String
  publicNote: String
  updatedAt: Datetime
  userId: Int
}

"""Represents an update to a `Lily`. Fields that are set will be updated."""
input LilyPatch {
  ahsId: String

  """The primary key for the `AHS Data` this `Lily` references."""
  ahsRef: Int
  createdAt: Datetime
  id: Int
  imgUrl: [String]

  """The primary key for the `List` this `Lily` belongs to."""
  listId: Int
  name: String
  price: BigFloat
  privateNote: String
  publicNote: String
  updatedAt: Datetime
  userId: Int
}

"""A list of lilies."""
type List {
  """A long bio for the `List` written by the `User`."""
  bio: String

  """The time this `List` was created."""
  createdAt: Datetime!

  """The primary key for the `List`."""
  id: Int!

  """A short introduction for the `List` written by the `User`."""
  intro: String

  """Reads and enables pagination through a set of `Lily`."""
  lilies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LilyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Lily`."""
    orderBy: [LiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LiliesConnection!

  """The name of the `List` written by the `User`."""
  name: String!

  """The time this `List` was last modified (or created)."""
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `List`."""
  user: User

  """The id of the `User`."""
  userId: Int!
}

"""
A condition to be used against `List` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ListCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `List`"""
input ListInput {
  """A long bio for the `List` written by the `User`."""
  bio: String

  """A short introduction for the `List` written by the `User`."""
  intro: String

  """The name of the `List` written by the `User`."""
  name: String!
}

"""Represents an update to a `List`. Fields that are set will be updated."""
input ListPatch {
  """A long bio for the `List` written by the `User`."""
  bio: String

  """A short introduction for the `List` written by the `User`."""
  intro: String

  """The name of the `List` written by the `User`."""
  name: String
}

"""A connection to a list of `List` values."""
type ListsConnection {
  """
  A list of edges which contains the `List` and cursor to aid in pagination.
  """
  edges: [ListsEdge!]!

  """A list of `List` objects."""
  nodes: [List!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `List` you could get from the connection."""
  totalCount: Int!
}

"""A `List` edge in the connection."""
type ListsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `List` at the end of the edge."""
  node: List!
}

"""Methods to use when ordering `List`."""
enum ListsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

input LoginInput {
  password: String!
  username: String!
}

type LoginPayload {
  user: User!
}

type LogoutPayload {
  success: Boolean
}

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: Int!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload

  """Creates a single `Lily`."""
  createLily(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLilyInput!
  ): CreateLilyPayload

  """Creates a single `List`."""
  createList(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateListInput!
  ): CreateListPayload

  """Creates a single `StripeCustomer`."""
  createStripeCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStripeCustomerInput!
  ): CreateStripeCustomerPayload

  """Creates a single `StripeSubscription`."""
  createStripeSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStripeSubscriptionInput!
  ): CreateStripeSubscriptionPayload

  """Get a signed URL for uploading files. It will expire in 5 minutes."""
  createUploadUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUploadUrlInput!
  ): CreateUploadUrlPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Creates a single `UserLilyPhoto`."""
  createUserLilyPhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserLilyPhotoInput!
  ): CreateUserLilyPhotoPayload

  """Deletes a single `Lily` using a unique key."""
  deleteLily(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLilyInput!
  ): DeleteLilyPayload

  """Deletes a single `List` using a unique key."""
  deleteList(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteListInput!
  ): DeleteListPayload

  """Deletes a single `StripeCustomer` using a unique key."""
  deleteStripeCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStripeCustomerInput!
  ): DeleteStripeCustomerPayload

  """Deletes a single `StripeSubscription` using a unique key."""
  deleteStripeSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStripeSubscriptionInput!
  ): DeleteStripeSubscriptionPayload
  deleteUpload(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUploadInput!
  ): DeleteUploadPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserLilyPhoto` using a unique key."""
  deleteUserLilyPhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLilyPhotoInput!
  ): DeleteUserLilyPhotoPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload

  """Updates a single `Lily` using a unique key and a patch."""
  updateLily(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLilyInput!
  ): UpdateLilyPayload

  """Updates a single `List` using a unique key and a patch."""
  updateList(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateListInput!
  ): UpdateListPayload

  """Updates a single `StripeCustomer` using a unique key and a patch."""
  updateStripeCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStripeCustomerInput!
  ): UpdateStripeCustomerPayload

  """Updates a single `StripeSubscription` using a unique key and a patch."""
  updateStripeSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStripeSubscriptionInput!
  ): UpdateStripeSubscriptionPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  """Reads and enables pagination through a set of `AhsDatum`."""
  ahsData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AhsDatumCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AhsDatum`."""
    orderBy: [AhsDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): AhsDataConnection
  ahsDatum(id: Int!): AhsDatum
  ahsDatumByAhsId(ahsId: Int!): AhsDatum

  """The currently logged in user (or null if not logged in)."""
  currentUser: User

  """Reads and enables pagination through a set of `Lily`."""
  lilies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LilyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Lily`."""
    orderBy: [LiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LiliesConnection
  lily(id: Int!): Lily
  list(id: Int!): List

  """Reads and enables pagination through a set of `List`."""
  lists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ListCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `List`."""
    orderBy: [ListsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ListsConnection

  """Reads and enables pagination through a set of `AhsDatum`."""
  searchAhsLilies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    search: String!
  ): AhsDataConnection
  stripeCustomer(id: String!): StripeCustomer
  stripeCustomerByUserId(userId: Int!): StripeCustomer

  """Reads and enables pagination through a set of `StripeCustomer`."""
  stripeCustomers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StripeCustomerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `StripeCustomer`."""
    orderBy: [StripeCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeCustomersConnection
  stripeSubscription(id: String!): StripeSubscription
  stripeSubscriptionByCustomerId(customerId: String!): StripeSubscription
  stripeSubscriptionByUserId(userId: Int!): StripeSubscription

  """Reads and enables pagination through a set of `StripeSubscription`."""
  stripeSubscriptions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StripeSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `StripeSubscription`."""
    orderBy: [StripeSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeSubscriptionsConnection
  user(id: Int!): User
  userAuthentication(id: Int!): UserAuthentication
  userByUsername(username: String!): User
  userEmail(id: Int!): UserEmail
  userLilyPhoto(id: String!): UserLilyPhoto

  """Reads and enables pagination through a set of `UserLilyPhoto`."""
  userLilyPhotos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLilyPhotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserLilyPhoto`."""
    orderBy: [UserLilyPhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLilyPhotosConnection
}

input RegisterInput {
  avatarUrl: String
  email: String!
  name: String
  password: String!
  username: String!
}

type RegisterPayload {
  user: User!
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: Int!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  resetToken: String!
  userId: Int!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

type StripeCustomer {
  createdAt: Datetime!
  id: String!

  """
  Reads a single `StripeSubscription` that is related to this `StripeCustomer`.
  """
  stripeSubscriptionByCustomerId: StripeSubscription

  """Reads and enables pagination through a set of `StripeSubscription`."""
  stripeSubscriptionsByCustomerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StripeSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `StripeSubscription`."""
    orderBy: [StripeSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeSubscriptionsConnection! @deprecated(reason: "Please use stripeSubscriptionByCustomerId instead")
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `StripeCustomer`."""
  user: User
  userId: Int!
}

"""
A condition to be used against `StripeCustomer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StripeCustomerCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `StripeCustomer`"""
input StripeCustomerInput {
  createdAt: Datetime
  id: String!
  updatedAt: Datetime
  userId: Int
}

"""
Represents an update to a `StripeCustomer`. Fields that are set will be updated.
"""
input StripeCustomerPatch {
  createdAt: Datetime
  id: String
  updatedAt: Datetime
  userId: Int
}

"""A connection to a list of `StripeCustomer` values."""
type StripeCustomersConnection {
  """
  A list of edges which contains the `StripeCustomer` and cursor to aid in pagination.
  """
  edges: [StripeCustomersEdge!]!

  """A list of `StripeCustomer` objects."""
  nodes: [StripeCustomer!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StripeCustomer` you could get from the connection."""
  totalCount: Int!
}

"""A `StripeCustomer` edge in the connection."""
type StripeCustomersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StripeCustomer` at the end of the edge."""
  node: StripeCustomer!
}

"""Methods to use when ordering `StripeCustomer`."""
enum StripeCustomersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type StripeSubscription {
  createdAt: Datetime!

  """
  Reads a single `StripeCustomer` that is related to this `StripeSubscription`.
  """
  customer: StripeCustomer
  customerId: String!
  id: String!
  subscriptionInfo: StripeSubscriptionInfo
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `StripeSubscription`."""
  user: User
  userId: Int!
}

"""
A condition to be used against `StripeSubscription` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StripeSubscriptionCondition {
  """Checks for equality with the object’s `customerId` field."""
  customerId: String

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

type StripeSubscriptionInfo {
  status: String!
}

"""An input for mutations affecting `StripeSubscription`"""
input StripeSubscriptionInput {
  createdAt: Datetime
  customerId: String!
  id: String!
  updatedAt: Datetime
  userId: Int
}

"""
Represents an update to a `StripeSubscription`. Fields that are set will be updated.
"""
input StripeSubscriptionPatch {
  createdAt: Datetime
  customerId: String
  id: String
  updatedAt: Datetime
  userId: Int
}

"""A connection to a list of `StripeSubscription` values."""
type StripeSubscriptionsConnection {
  """
  A list of edges which contains the `StripeSubscription` and cursor to aid in pagination.
  """
  edges: [StripeSubscriptionsEdge!]!

  """A list of `StripeSubscription` objects."""
  nodes: [StripeSubscription!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `StripeSubscription` you could get from the connection.
  """
  totalCount: Int!
}

"""A `StripeSubscription` edge in the connection."""
type StripeSubscriptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StripeSubscription` at the end of the edge."""
  node: StripeSubscription!
}

"""Methods to use when ordering `StripeSubscription`."""
enum StripeSubscriptionsOrderBy {
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  """Triggered when the logged in user's record is updated in some way."""
  currentUserUpdated: UserSubscriptionPayload
}

"""All input for the `updateLily` mutation."""
input UpdateLilyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Lily` being updated.
  """
  patch: LilyPatch!
}

"""The output of our update `Lily` mutation."""
type UpdateLilyPayload {
  """Reads a single `AhsDatum` that is related to this `Lily`."""
  ahsDatumByAhsRef: AhsDatum

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Lily` that was updated by this mutation."""
  lily: Lily

  """An edge for our `Lily`. May be used by Relay 1."""
  lilyEdge(
    """The method to use when ordering `Lily`."""
    orderBy: [LiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LiliesEdge

  """Reads a single `List` that is related to this `Lily`."""
  list: List

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Lily`."""
  user: User
}

"""All input for the `updateList` mutation."""
input UpdateListInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key for the `List`."""
  id: Int!

  """
  An object where the defined keys will be set on the `List` being updated.
  """
  patch: ListPatch!
}

"""The output of our update `List` mutation."""
type UpdateListPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `List` that was updated by this mutation."""
  list: List

  """An edge for our `List`. May be used by Relay 1."""
  listEdge(
    """The method to use when ordering `List`."""
    orderBy: [ListsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ListsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `List`."""
  user: User
}

"""All input for the `updateStripeCustomer` mutation."""
input UpdateStripeCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!

  """
  An object where the defined keys will be set on the `StripeCustomer` being updated.
  """
  patch: StripeCustomerPatch!
}

"""The output of our update `StripeCustomer` mutation."""
type UpdateStripeCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `StripeCustomer` that was updated by this mutation."""
  stripeCustomer: StripeCustomer

  """An edge for our `StripeCustomer`. May be used by Relay 1."""
  stripeCustomerEdge(
    """The method to use when ordering `StripeCustomer`."""
    orderBy: [StripeCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeCustomersEdge

  """Reads a single `User` that is related to this `StripeCustomer`."""
  user: User
}

"""All input for the `updateStripeSubscription` mutation."""
input UpdateStripeSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!

  """
  An object where the defined keys will be set on the `StripeSubscription` being updated.
  """
  patch: StripeSubscriptionPatch!
}

"""The output of our update `StripeSubscription` mutation."""
type UpdateStripeSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `StripeCustomer` that is related to this `StripeSubscription`.
  """
  customer: StripeCustomer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `StripeSubscription` that was updated by this mutation."""
  stripeSubscription: StripeSubscription

  """An edge for our `StripeSubscription`. May be used by Relay 1."""
  stripeSubscriptionEdge(
    """The method to use when ordering `StripeSubscription`."""
    orderBy: [StripeSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeSubscriptionsEdge

  """Reads a single `User` that is related to this `StripeSubscription`."""
  user: User
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: Int!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A user who can log in to the application."""
type User {
  """Optional avatar URL."""
  avatarUrl: String

  """A markdown text bio for the user."""
  bio: String
  createdAt: Datetime!
  freeUntil: Datetime
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: Int!

  """Array of profile photos for the `User`"""
  imgUrls: [String]

  """A short introduction for the user."""
  intro: String

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!

  """Reads and enables pagination through a set of `Lily`."""
  lilies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LilyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Lily`."""
    orderBy: [LiliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LiliesConnection!

  """Reads and enables pagination through a set of `List`."""
  lists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ListCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `List`."""
    orderBy: [ListsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ListsConnection!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Reads a single `StripeCustomer` that is related to this `User`."""
  stripeCustomer: StripeCustomer

  """Reads and enables pagination through a set of `StripeCustomer`."""
  stripeCustomers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StripeCustomerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `StripeCustomer`."""
    orderBy: [StripeCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeCustomersConnection! @deprecated(reason: "Please use stripeCustomer instead")

  """Reads a single `StripeSubscription` that is related to this `User`."""
  stripeSubscription: StripeSubscription

  """Reads and enables pagination through a set of `StripeSubscription`."""
  stripeSubscriptions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StripeSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `StripeSubscription`."""
    orderBy: [StripeSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StripeSubscriptionsConnection! @deprecated(reason: "Please use stripeSubscription instead")
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthenticationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]
  ): [UserAuthentication!]!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection!

  """Reads and enables pagination through a set of `UserLilyPhoto`."""
  userLilyPhotos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLilyPhotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserLilyPhoto`."""
    orderBy: [UserLilyPhotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLilyPhotosConnection!

  """A location for the user."""
  userLocation: String

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication {
  createdAt: Datetime!
  id: Int!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
  userId: Int!
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Information about a user's email address."""
type UserEmail {
  createdAt: Datetime!

  """The users email address, in `a@b.c` format."""
  email: String!
  id: Int!
  isPrimary: Boolean!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userId: Int!
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  """The users email address, in `a@b.c` format."""
  email: String!
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """A list of `UserEmail` objects."""
  nodes: [UserEmail!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail!
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""A photo of a `Lily` added by `User`."""
type UserLilyPhoto {
  """The time this photo item was added."""
  createdAt: Datetime!

  """The s3 id the photo is saved at"""
  id: String!

  """Reads a single `Lily` that is related to this `UserLilyPhoto`."""
  lily: Lily
  lilyId: Int!

  """Reads a single `User` that is related to this `UserLilyPhoto`."""
  user: User
  userId: Int!
}

"""
A condition to be used against `UserLilyPhoto` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserLilyPhotoCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `lilyId` field."""
  lilyId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `UserLilyPhoto`"""
input UserLilyPhotoInput {
  """The s3 id the photo is saved at"""
  id: String!
  lilyId: Int!
}

"""A connection to a list of `UserLilyPhoto` values."""
type UserLilyPhotosConnection {
  """
  A list of edges which contains the `UserLilyPhoto` and cursor to aid in pagination.
  """
  edges: [UserLilyPhotosEdge!]!

  """A list of `UserLilyPhoto` objects."""
  nodes: [UserLilyPhoto!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserLilyPhoto` you could get from the connection."""
  totalCount: Int!
}

"""A `UserLilyPhoto` edge in the connection."""
type UserLilyPhotosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserLilyPhoto` at the end of the edge."""
  node: UserLilyPhoto!
}

"""Methods to use when ordering `UserLilyPhoto`."""
enum UserLilyPhotosOrderBy {
  ID_ASC
  ID_DESC
  LILY_ID_ASC
  LILY_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Optional avatar URL."""
  avatarUrl: String

  """A markdown text bio for the user."""
  bio: String

  """Array of profile photos for the `User`"""
  imgUrls: [String]

  """A short introduction for the user."""
  intro: String

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """A location for the user."""
  userLocation: String

  """Public-facing username (or 'handle') of the user."""
  username: String
}

type UserSubscriptionPayload {
  event: String
  user: User
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
  userEmailId: Int!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}
